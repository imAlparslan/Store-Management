// <auto-generated />
using System;
using System.Collections.Generic;
using InventoryManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryManagement.Infrastructure.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagement.Domain.ItemAggregateRoot.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDefaultStockItem")
                        .HasColumnType("bit")
                        .HasColumnName("IsDefaultStockItem")
                        .HasColumnOrder(5);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId")
                        .HasColumnOrder(1);

                    b.ComplexProperty<Dictionary<string, object>>("ProductDefinition", "InventoryManagement.Domain.ItemAggregateRoot.Item.ProductDefinition#ProductDefinition", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductCode")
                                .HasColumnOrder(2);

                            b1.Property<string>("Definition")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductDefinition")
                                .HasColumnOrder(4);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductName")
                                .HasColumnOrder(3);
                        });

                    b.HasKey("Id");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Domain.StockAggregateRoot.Entities.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StockItemId")
                        .HasColumnOrder(0);

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Capacity", "InventoryManagement.Domain.StockAggregateRoot.Entities.StockItem.Capacity#Capacity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Capacity")
                                .HasColumnOrder(3);
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Quantity", "InventoryManagement.Domain.StockAggregateRoot.Entities.StockItem.Quantity#Quantity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Quantity")
                                .HasColumnOrder(2);
                        });

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("StockItems", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Domain.StockAggregateRoot.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StockId")
                        .HasColumnOrder(0);

                    b.PrimitiveCollection<string>("GroupIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupIds");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreId")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Domain.StockAggregateRoot.Entities.StockItem", b =>
                {
                    b.HasOne("InventoryManagement.Domain.StockAggregateRoot.Stock", null)
                        .WithMany("StockItems")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("InventoryManagement.Domain.StockAggregateRoot.Stock", b =>
                {
                    b.Navigation("StockItems");
                });
#pragma warning restore 612, 618
        }
    }
}
